What happens when you initialize a repository? Why do you need to do it?
>> a hidden folder .git was added. The 'git init' must be done before the first commit.

How is the staging area different from the working directory and the repository? What value do you think it offers?
>> staging area is a full/sub set of files in working directory. staging area with no history, but repository does have. it offers a flexibility in commit files to repository by add/remove file from/to the area.

How can you use the staging area to make sure you have one commit per logical change?
>> I can use command 'git diff --staged' to compare different between repository and staging area. Then I commit the change after I verify that the change was what we expected for one specific logical change!


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
>> One of the example is to show the project in different language, so that for every language display, the previous commit will be the same.

How do the diagrams help you visualize the branch structure?
>> you can see the parant of each commit easily

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
>> The result will be 1)the original code both branches exist, plus 2)the new code exist in either branch, minus 3)the original code was deleted in either branch. We represent the log in the diagram by using command 'git log --graph --oneline', in this way, we can see the merging history clearly.

What are the pros and cons of Git¡¦s automatic merging vs. always doing merges manually?
>> By using Git's auto. merging it does save time but may result in logical error sometimes, while manually merging it does take time but programmer can remove some unnecessary code during the review of the code to reduce logical error.